@page "/search"
@using System.Linq;
@inject QueryFishService _queryFishService;
@inject RecommendService _recommendationService;

<div class="search-input-container">
    <div id="search-icon-holder">
        <svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path
                d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z">
            </path>
        </svg>
    </div>
    <input id="keyword-input" @bind-value="Keyword" placeholder="Search for a fish by name" autocomplete="no"
        list="fishNames" />
</div>

<div id="search-operations-container">
    <button type="button" @onclick="QueryFishAsync">Search</button>
    <button type="button" @onclick="ClearResult">Clear</button>
</div>

<div id="fish-card-container">
    @foreach (FishItem fish in _fishResult)
    {
        <div class="fish-card">
            <h3>@fish.Name</h3>
            <div>@GetRecommendation(fish)</div>
        </div>
    }
</div>

<datalist id="fishNames">
    @if (_allFishNames is not null)
    {
        foreach (var name in _allFishNames)
        {
            <option value="@name" />
        }
    }
</datalist>

@code {

    [Parameter]
    public EventCallback<string> OnKeywordChanged { get; set; }

    private string[]? _allFishNames;

    private string? _keyword;
    private string? Keyword
    {
        get
        {
            return _keyword;
        }
        set
        {
            if (!string.Equals(_keyword, value, StringComparison.Ordinal))
            {
                _keyword = value;
                Console.WriteLine("New keyword encountered: {0}", value);
                OnKeywordChanged.InvokeAsync(value);
                _ = QueryFishAsync();
            }
        }
    }

    private IEnumerable<FishItem> _fishResult = Enumerable.Empty<FishItem>();

    protected override async Task OnInitializedAsync()
    {
        _allFishNames = (await _queryFishService.GetAllFishesAsync())
        .Select(item => item.Name)
        .OrderBy(name => name, StringComparer.OrdinalIgnoreCase).ToArray();
    }

    public async Task QueryFishAsync()
    {
        _fishResult = (await _queryFishService.GetFishesByAsync(_keyword))
        .OrderBy(f => f.Name);
    }

    public string GetRecommendation(FishItem fish)
    {
        return _recommendationService.GetRecommendation(fish);
    }

    public void ClearResult()
    {
        Keyword = string.Empty;
    }
}
