@using System.Linq;
@using System.Collections.Specialized
@inject QueryFishService _queryFishService;
@inject RecommendService _recommendationService;
@inject NavigationManager _navigationManager;
@implements IDisposable

<div class="search-input-container">
    <div id="search-icon-holder">
        <svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path
                d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z">
            </path>
        </svg>
    </div>
    <input id="keyword-input" @bind-value="KeywordText" placeholder="Search for a fish by name" autocomplete="no"
        list="fishNames" />
</div>

<div id="search-operations-container">
    <button type="button" @onclick="QueryFishCommand">Search</button>
    <button type="button" @onclick="ClearResultCommand">Clear</button>
</div>

<div class="quick-access">
    <div>
        Try dishes:
    </div>
    <button @onclick=@(e=> NavigateToQueryFish("catfish"))>Catfish</button>
    <button @onclick=@(e=> NavigateToQueryFish("lobster"))>Lobster</button>
    <button @onclick=@(e=> NavigateToQueryFish("salmon"))>Salmon</button>
    <button @onclick=@(e=> NavigateToQueryFish("tuna"))>Tuna</button>
</div>

<div id="fish-card-container">
    @foreach (FishItem fish in _fishResult)
    {
        <div class="fish-card" @key=fish.Name>
            <h3>@fish.Name</h3>
            <div>@GetRecommendation(fish)</div>
        </div>
    }
</div>

<datalist id="fishNames">
    @if (_allFishNames is not null)
    {
        foreach (var name in _allFishNames)
        {
            <option value="@name" />
        }
    }
</datalist>

@code {
    private CancellationTokenSource? _cancellationTokenSource;

    [Parameter]
    public string? SearchKeyword { get; set; }
    private string[]? _allFishNames;

    [Parameter]
    public EventCallback<string> OnKeywordChanged { get; set; }

    private IEnumerable<FishItem> _fishResult = Enumerable.Empty<FishItem>();

    protected override async Task OnInitializedAsync()
    {
        _cancellationTokenSource = new CancellationTokenSource();
        _allFishNames = (await _queryFishService.GetAllFishesAsync(_cancellationTokenSource.Token))
        .Select(item => item.Name)
        .OrderBy(name => name, StringComparer.OrdinalIgnoreCase).ToArray();
    }

    protected override async Task OnParametersSetAsync()
    {
#if DEBUG
Console.WriteLine($"[{nameof(Search)}] {nameof(OnParametersSet)} invoked, {nameof(SearchKeyword)}: {SearchKeyword}");
#endif
        KeywordText = SearchKeyword;
        await QueryFishAsync(SearchKeyword);
    }

    private string? _keywordText;
    public string? KeywordText
    {
        get
        {
            return _keywordText;
        }
        set
        {
            // Making sure it doesn't dead loop by checking the value.
            // If they are the same already, do not invoking navigation again.
            if (!string.Equals(_keywordText, value, StringComparison.Ordinal))
            {
                _keywordText = value;
                NavigateToQueryFish(value);
            }
        }
    }



    public void QueryFishCommand()
    {
        NavigateToQueryFish(SearchKeyword);
    }

    public void ClearResultCommand()
    {
        NavigateToQueryFish(string.Empty);
    }

    public string GetRecommendation(FishItem fish)
    {
        return _recommendationService.GetRecommendation(fish);
    }

    private void NavigateToQueryFish(string? keyword)
    {
        UriBuilder builder = new UriBuilder(_navigationManager.Uri);
        if (!string.IsNullOrEmpty(keyword))
        {
            NameValueCollection queryString = System.Web.HttpUtility.ParseQueryString(builder.Query);
            queryString["q"] = keyword;
            builder.Query = queryString.ToString();
        }
        else
        {
            builder.Query = null;
        }
        _navigationManager.NavigateTo(builder.ToString(), forceLoad: false);
    }

    private async Task QueryFishAsync(string? keyword)
    {
#if DEBUG
Console.WriteLine($"Querying fish: {keyword}");
#endif

        _fishResult = (await _queryFishService.GetFishesByAsync(
        keyword,
        cancellationToken: _cancellationTokenSource?.Token ?? default
        )).OrderBy(f => f.Name);

#if DEBUG
Console.WriteLine($"Queried fish: {keyword}");
#endif
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");
        _cancellationTokenSource?.Dispose();
    }
}
